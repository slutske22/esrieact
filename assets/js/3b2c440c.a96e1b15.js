"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3934],{45062:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var t=a(74848),i=a(28453);const s={},r="Layers",l={id:"layers/index",title:"Layers",description:"Introduction",source:"@site/examples/layers/index.mdx",sourceDirName:"layers",slug:"/layers/",permalink:"/esrieact/examples/layers/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",previous:{title:"MapView",permalink:"/esrieact/examples/mapview"},next:{title:"FeatureLayer",permalink:"/esrieact/examples/layers/FeatureLayer"}},c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"State managed layers",id:"state-managed-layers",level:2},{value:"State managed visibility",id:"state-managed-visibility",level:2},{value:"State managed props",id:"state-managed-props",level:2},{value:"Refs",id:"refs",level:2},{value:"Events",id:"events",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"layers",children:"Layers"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["All layers types can be added to a ",(0,t.jsx)(n.code,{children:"MapView"})," as children:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  return (\n    <MapView\n      ViewProperties={{ extent: OAHU_EXTENT }}\n      MapProperties={{ basemap: "topo-vector" }}\n      style={{ height: "300px", width: "100%" }}\n    >\n      <FeatureLayer url={BENTHIC_FEATURELAYER_URL} />\n      <MapImageLayer url={LANDCOVER_IMAGELAYER_URL} />\n    </MapView>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"state-managed-layers",children:"State managed layers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [visibleLayers, setVisibleLayers] = useState(["benthic", "landcover"]);\n\n  const toggleLayer = (layerName, checked) => {\n    if (checked) {\n      setVisibleLayers([...visibleLayers, layerName]);\n    } else {\n      setVisibleLayers(visibleLayers.filter((l) => l !== layerName));\n    }\n  };\n\n  return (\n    <div>\n      <div className="flex flex-col gap-2 mb-2">\n        <label>\n          <input\n            type="checkbox"\n            className="mr-2"\n            checked={visibleLayers.includes("landcover")}\n            onChange={(e) => toggleLayer("landcover", e.target.checked)}\n          />\n          Land Cover Status\n        </label>\n        <label>\n          <input\n            type="checkbox"\n            className="mr-2"\n            checked={visibleLayers.includes("benthic")}\n            onChange={(e) => toggleLayer("benthic", e.target.checked)}\n          />\n          Benthic Habitat\n        </label>\n      </div>\n\n      <MapView\n        ViewProperties={{ extent: OAHU_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      >\n        {visibleLayers.includes("benthic") && (\n          <FeatureLayer url={BENTHIC_FEATURELAYER_URL} />\n        )}\n        {visibleLayers.includes("landcover") && (\n          <MapImageLayer url={LANDCOVER_IMAGELAYER_URL} />\n        )}\n        <LayerList position="top-right" />\n      </MapView>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"state-managed-visibility",children:"State managed visibility"}),"\n",(0,t.jsxs)(n.p,{children:["The above scenario manages whether or not a layer present on the map. Under the hood, esrieact calls the ",(0,t.jsx)(n.code,{children:".addTo"})," and ",(0,t.jsx)(n.code,{children:".remove"})," methods on the map instance with the child layers. If you wish for the layers to remain present on the map, but toggle their visibility, you can manage their ",(0,t.jsx)(n.code,{children:"visible"})," prop with state:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [visibleLayers, setVisibleLayers] = useState(["benthic", "landcover"]);\n\n  const toggleLayer = (layerName, checked) => {\n    if (checked) {\n      setVisibleLayers([...visibleLayers, layerName]);\n    } else {\n      setVisibleLayers(visibleLayers.filter((l) => l !== layerName));\n    }\n  };\n\n  return (\n    <div>\n      <div className="flex flex-col gap-2 mb-2">\n        <label>\n          <input\n            type="checkbox"\n            className="mr-2"\n            checked={visibleLayers.includes("landcover")}\n            onChange={(e) => toggleLayer("landcover", e.target.checked)}\n          />\n          Land Cover Visible\n        </label>\n        <label>\n          <input\n            type="checkbox"\n            className="mr-2"\n            checked={visibleLayers.includes("benthic")}\n            onChange={(e) => toggleLayer("benthic", e.target.checked)}\n          />\n          Benthic Habitat Visible\n        </label>\n      </div>\n\n      <MapView\n        ViewProperties={{ extent: OAHU_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      >\n        <FeatureLayer\n          url={BENTHIC_FEATURELAYER_URL}\n          visible={visibleLayers.includes("benthic")}\n        />\n        <MapImageLayer\n          url={LANDCOVER_IMAGELAYER_URL}\n          visible={visibleLayers.includes("landcover")}\n        />\n        <LayerList position="top-right" />\n      </MapView>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"state-managed-props",children:"State managed props"}),"\n",(0,t.jsxs)(n.p,{children:["Just like ",(0,t.jsx)(n.code,{children:"visible"}),", any and all ",(0,t.jsx)(n.em,{children:"non-readonly"})," layer properties can be managed with state:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [opacity, setOpacity] = useState(100);\n  const [listMode, setListMode] = useState("show");\n\n  return (\n    <div>\n      <div className="flex gap-10 mb-2">\n        <div>\n          <h4>List Mode</h4>\n          <select\n            value={listMode}\n            onChange={(e) => setListMode(e.target.value)}\n          >\n            {["show", "hide", "hide-children"].map((mode) => (\n              <option key={mode} value={mode}>\n                {mode}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <h4>Opacity</h4>\n          <input\n            type="range"\n            value={opacity}\n            onChange={(e) => setOpacity(e.target.value)}\n          />\n        </div>\n      </div>\n\n      <MapView\n        ViewProperties={{ extent: OAHU_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      >\n        <MapImageLayer\n          url={LANDCOVER_IMAGELAYER_URL}\n          opacity={opacity / 100}\n          listMode={listMode}\n        />\n        <LayerList position="top-right" />\n      </MapView>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["All layers inherit properties from ",(0,t.jsx)(n.a,{href:"https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#properties-summary",children:"__esri.LayerPropeties"}),", though many layers have other specific properties that can be managed via state."]}),"\n",(0,t.jsx)(n.h2,{id:"refs",children:"Refs"}),"\n",(0,t.jsx)(n.p,{children:"Each layer can take a ref, which holds the underlying ArcGIS JS API layer instance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const featureLayerRef = useRef<__esri.FeatureLayer>();\n  const mapImageLayerRef = useRef<__esri.MapImageLayer>();\n\n  return (\n    <div>\n      <MapView\n        ViewProperties={{ extent: OAHU_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      >\n        <FeatureLayer ref={featureLayerRef} url={BENTHIC_FEATURELAYER_URL} />\n        <MapImageLayer ref={mapImageLayerRef} url={LANDCOVER_IMAGELAYER_URL} />\n      </MapView>\n\n      <div className="flex gap-2 mt-2">\n        <button onClick={() => console.log(featureLayerRef)}>\n          Log FeatureLayer ref\n        </button>\n        <button onClick={() => console.log(mapImageLayerRef)}>\n          Log MapImageLayer ref\n        </button>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsxs)(n.p,{children:["Just like ",(0,t.jsx)(n.code,{children:"MapView"}),", events can be listened to on any ",(0,t.jsx)(n.code,{children:"Layer"})," component:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [point, setPont] = useState();\n  const [logs, setLogs] = useState([]);\n  const [basemap, setBasemap] = useState("topo-vector");\n\n  return (\n    <div>\n      <MapView\n        style={{ height: "300px", width: "100%" }}\n        MapProperties={{ basemap }}\n        ViewProperties={{ extent: OAHU_EXTENT }}\n      >\n        <FeatureLayer\n          url={BENTHIC_FEATURELAYER_URL}\n          events={{\n            "layerview-create": (e) => {\n              setLogs((l) => [...l, `layerview-create: ${e}`]);\n            },\n          }}\n        />\n        <MapImageLayer\n          url={LANDCOVER_IMAGELAYER_URL}\n          events={{\n            "layerview-create": (e) => {\n              setLogs((l) => [...l, `layerview-create: ${e}`]);\n            },\n          }}\n        />\n      </MapView>\n\n      <div className="text-amber-50 bg-black w-full p-3">\n        <code className="!bg-black">\n          {logs.map((l) => (\n            <>\n              {l}\n              <br />\n            </>\n          ))}\n        </code>\n      </div>\n    </div>\n  );\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);