"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[550],{96908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=t(74848),a=t(28453);const s={sidebar_position:1},o="MapView",r={id:"mapview",title:"MapView",description:"Basic Example",source:"@site/examples/mapview.mdx",sourceDirName:".",slug:"/mapview",permalink:"/esrieact/examples/mapview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"examplesSidebar",next:{title:"featurelayerview",permalink:"/esrieact/examples/featurelayerview"}},c={},l=[{value:"Basic Example",id:"basic-example",level:2},{value:"State-based properties",id:"state-based-properties",level:2},{value:"Getting a ref",id:"getting-a-ref",level:2},{value:"Externalizing the <code>MapRef</code> with <code>MapContextProvider</code>",id:"externalizing-the-mapref-with-mapcontextprovider",level:2},{value:"Events",id:"events",level:2},{value:"Events with <code>view</code> access",id:"events-with-view-access",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mapview",children:"MapView"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"MapView"})," can be declared without any children, with some simple props to set the view and map details. As in a vanilla ArcGIS JS API implementation, the height and width of the map container must be set."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const OAHU_EXTENT = {\n    xmax: -17550549,\n    xmin: -17580397,\n    ymax: 2461002,\n    ymin: 2438185,\n    spatialReference: { wkid: 102100 },\n  };\n\n  return (\n    <MapView\n      ViewProperties={{ extent: OAHU_EXTENT }}\n      MapProperties={{ basemap: "topo-vector" }}\n      style={{ height: "300px", width: "100%" }}\n    />\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"state-based-properties",children:"State-based properties"}),"\n",(0,i.jsx)(n.p,{children:"React state can be used to manage various view and map properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [ext, setExt] = useState(OAHU_EXTENT);\n  const [basemap, setBasemap] = useState("topo-vector");\n\n  return (\n    <div className="flex gap-2">\n      <div>\n        <h5>Change Extent:</h5>\n        <div className="flex gap-2 mb-8">\n          <button onClick={() => setExt(OAHU_EXTENT)}>Hawaii</button>\n          <button onClick={() => setExt(CALIFORNIA_EXTENT)}>California</button>\n        </div>\n\n        <h5>Change Basemap:</h5>\n        <div className="flex gap-2">\n          <button onClick={() => setBasemap("topo-vector")}>Topo Vector</button>\n          <button onClick={() => setBasemap("streets")}>Streets</button>\n        </div>\n      </div>\n\n      <MapView\n        ViewProperties={{ extent: ext }}\n        MapProperties={{ basemap }}\n        style={{ height: "300px", flex: 1 }}\n      />\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getting-a-ref",children:"Getting a ref"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ref"})," is available on the ",(0,i.jsx)(n.code,{children:"MapView"})," which gives you access to the esri ",(0,i.jsx)(n.code,{children:"map"}),", ",(0,i.jsx)(n.code,{children:"view"}),", and the ",(0,i.jsx)(n.code,{children:"MapView"})," DOM ",(0,i.jsx)(n.code,{children:"element"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const ref = useRef<MapRef>();\n\n  return (\n    <>\n      <div className="flex gap-2 mb-2">\n        <button onClick={() => console.log(ref.current)}>Log the Ref</button>\n        <button\n          onClick={() => {\n            ref.current.view.goTo(KILAUEA_TARGET, { duration: 5000 });\n          }}\n        >\n          Use the ref to fly to Kilauea Volcano\n        </button>\n      </div>\n      <MapView\n        ref={ref}\n        ViewProperties={{ extent: HAWAII_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      />\n    </>\n  );\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"externalizing-the-mapref-with-mapcontextprovider",children:["Externalizing the ",(0,i.jsx)(n.code,{children:"MapRef"})," with ",(0,i.jsx)(n.code,{children:"MapContextProvider"})]}),"\n",(0,i.jsxs)(n.p,{children:["It is a very common use case to need to access the underlying ",(0,i.jsx)(n.code,{children:"map"})," and ",(0,i.jsx)(n.code,{children:"view"})," instances from outside the ",(0,i.jsx)(n.code,{children:"MapView"})," container. Instead of using a ",(0,i.jsx)(n.code,{children:"MapView"}),", you can use a ",(0,i.jsx)(n.code,{children:"MapViewContext"})," to wrap the parts of your application that need access to the map. When using a ",(0,i.jsx)(n.code,{children:"MapViewContext"}),", use a ",(0,i.jsx)(n.code,{children:"MapViewCore"}),", which will read the same context as the rest of your application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live noInline",live:!0,children:'function Menu() {\n  const { map, view } = useMap();\n\n  return (\n    <nav className="border-blue-800 border p-2">\n      <h4>Elsewhere in the component tree</h4>\n      <button\n        onClick={() => {\n          view.goTo(KILAUEA_TARGET, { duration: 5000 });\n        }}\n      >\n        Fly to Kilauea Volcano\n      </button>\n    </nav>\n  );\n}\n\nfunction Example() {\n  return (\n    <MapContextProvider>\n      <div className="flex gap-2">\n        <Menu />\n\n        <div className="flex-1 border-green-800 border">\n          <MapViewCore\n            ViewProperties={{ extent: HAWAII_EXTENT }}\n            MapProperties={{ basemap: "topo-vector" }}\n            style={{ height: "300px", width: "100%" }}\n          />\n        </div>\n      </div>\n    </MapContextProvider>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"MapView"})," creates its own internal ",(0,i.jsx)(n.code,{children:"MapContextProvider"})," and will ignore any ",(0,i.jsx)(n.code,{children:"MapContextProvider"}),"s that you declare, so you must use a ",(0,i.jsx)(n.code,{children:"MapViewCore"})," to communicate with ",(0,i.jsx)(n.code,{children:"MapContextProvider"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(n.p,{children:["Numerous events can be listened to with simple event listeners defined on the ",(0,i.jsx)(n.code,{children:"ViewProperties"})," prop:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [point, setPont] = useState();\n  const [logs, setLogs] = useState([]);\n  const [basemap, setBasemap] = useState("topo-vector");\n\n  return (\n    <div>\n      <div className="flex justify-between">\n        <div>\n          <h5>Click the map!</h5>\n          <pre>\n            {JSON.stringify(\n              {\n                lat: point?.latitude ?? "waiting for click",\n                lon: point?.longitude ?? "waiting for click",\n              },\n              null,\n              2,\n            )}\n          </pre>\n        </div>\n\n        <div>\n          <h5>Change Basemap to see layer events:</h5>\n          <div className="flex gap-2">\n            <button onClick={() => setBasemap("topo-vector")}>\n              Topo Vector\n            </button>\n            <button onClick={() => setBasemap("streets")}>Streets</button>\n          </div>\n        </div>\n      </div>\n\n      <MapView\n        style={{ height: "300px", width: "100%" }}\n        MapProperties={{ basemap }}\n        ViewProperties={{\n          extent: OAHU_EXTENT,\n          events: {\n            click: (e) => {\n              setPont(e.mapPoint);\n              setLogs([...logs, `click event fired`]);\n            },\n            "layerview-create": (e) =>\n              setLogs([...logs, `layerview-create event fired: ${e.layer.id}`]),\n            "layerview-destroy": (e) =>\n              setLogs([\n                ...logs,\n                `layerview-destroy event fired: ${e.layer.id}`,\n              ]),\n          },\n        }}\n      />\n\n      <div className="text-amber-50 bg-black w-full p-3">\n        <code className="!bg-black">\n          {logs.map((l) => (\n            <>\n              {l}\n              <br />\n            </>\n          ))}\n        </code>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For a full list of events, see ",(0,i.jsx)(n.a,{href:"/map-view#viewpropertiesevents",children:"ViewProperties.events"})]}),"\n",(0,i.jsxs)(n.h2,{id:"events-with-view-access",children:["Events with ",(0,i.jsx)(n.code,{children:"view"})," access"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also define the ",(0,i.jsx)(n.code,{children:"events"})," property as a function of the ",(0,i.jsx)(n.code,{children:"view"}),", which gives you access to the ",(0,i.jsx)(n.code,{children:"view"})," object within the callback"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  return (\n    <>\n      <h4>Click the map to center the view on your click</h4>\n      <MapView\n        style={{ height: "300px", width: "100%" }}\n        MapProperties={{ basemap: "topo-vector" }}\n        ViewProperties={{\n          extent: OAHU_EXTENT,\n          // No need for a ref, view available within callback\n          events: (view) => ({\n            click: (e) =>\n              view.goTo({\n                center: [e.mapPoint.longitude, e.mapPoint.latitude],\n              }),\n          }),\n        }}\n      />\n    </>\n  );\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);