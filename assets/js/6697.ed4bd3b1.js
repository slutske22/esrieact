"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6697],{6697:(t,e,s)=>{s.r(e),s.d(e,{createBatchExecutor:()=>o});s(39831);var i=s(82256),r=s(40189),n=s(92746);function o(t,e,s,i){return new a(t,e,s,i)}class h{constructor(t,e,s){this._executor=t,this._data=e,this._impl=s,this._closed=!1,this._resolver=(0,r.Tw)(),this._impl.open(this)}assertOpen(){if(this._closed)throw new Error("Batch closed.")}get data(){return this.assertOpen(),this._data}get results(){return this._resolver.promise}send(){try{this.assertOpen(),this._closed=!0,this._executor.resume(this),this._impl.close(this),(0,r.hn)(this._resolver,this._impl.execute(this._data))}catch(t){this._resolver.reject(t)}}}class a{constructor(t,e,s,i){if(this._runJob=e,this._maxRunning=s,this._abortSignal=i,this._jobIdSeq=0,this._running=new Set,this._blocked=new Set,this._openBatches=new Map,this._state="ready",this._runResolver=null,s<1)throw new Error(`_maxRunning=${s} but cannot be < 1`);this._todo=t[Symbol.iterator](),this._queue=new n.QueueProcessor({concurrency:1,process:async t=>{if("start"===t.type){const{id:e,args:s}=t,i=(0,r.Tw)(),n=(0,r.Tw)(),o={id:e,interrupt:i,finished:n.promise};return(0,r.hn)(n,this._runJob(s,{id:e,yieldFor:t=>this.yieldFor(o,t)}).then((()=>{this._blocked.has(e)&&this._fail(new Error(`job ${e} completed before resuming`)),this._running.delete(e)||this._fail(new Error(`job ${e} not running?`))}))),await Promise.race([i.promise,o.finished]),void this._tryQueue()}if("continue"===t.type)return t.job.interrupt=(0,r.Tw)(),"fulfilled"===t.data.status?t.continuation.resolve(t.data.value):t.continuation.reject(t.data.reason),await Promise.race([t.job.interrupt.promise,t.job.finished]),void this._tryQueue()}})}openBatch(t,e){return new h(this,t,e)}_fail(t,e=!1){if(this._runResolver?.reject(t),this._state="stopped",!e)throw t}_schedule(t){this._queue.push(t).catch((t=>this._fail(t,!0)))}_tryQueue(){if("running"===this._state)if(this._abortSignal?.aborted)this._fail((0,r.NK)(),!0);else{if(this._running.size<this._maxRunning){const t=this._todo.next();if(!t.done){const e=this._jobIdSeq++;return this._running.add(e),void this._schedule({type:"start",id:e,args:t.value})}}if(0===this._running.size)return this._runResolver?.resolve(),this._runResolver=null,void(this._state="stopped");if(this._blocked.size===this._running.size){let t=null,e=-1/0;for(const[s,i]of this._openBatches)i.size>e&&(t=s,e=i.size);return null==t&&this._fail(new Error("deadlock")),void t.send()}}}resume(t){const e=this._openBatches.get(t);if(this._openBatches.delete(t),null!=e)for(const s of e)this._blocked.delete(s)||this._fail(new Error(`job ${s} not suspended`))}async yieldFor(t,e){e.assertOpen(),this._running.has(t.id)||this._fail(new Error(`job ${t.id} not running`)),this._blocked.has(t.id)&&this._fail(new Error(`job ${t.id} already suspended`)),this._blocked.add(t.id),(0,i.tE)(this._openBatches,e,(()=>new Set)).add(t.id),null==t.interrupt&&this._fail(new Error(`job ${t.id} hasn't resumed yet`)),t.interrupt.resolve(),t.interrupt=null;const s=(0,r.Tw)();let n;try{n={status:"fulfilled",value:await e.results}}catch(h){n={status:"rejected",reason:h}}return this._schedule({type:"continue",continuation:s,data:n,job:t}),s.promise}run(){"ready"!==this._state&&this._fail(new Error(`executor not ready to start. state=${this._state}`));const t=(0,r.Tw)();return this._state="running",this._runResolver=t,this._tryQueue(),t.promise}}}}]);