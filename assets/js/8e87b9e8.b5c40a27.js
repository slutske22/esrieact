"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[59349],{10744:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>t,default:()=>o,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(74848),s=n(28453);const i={sidebar_position:3},t="GraphicsLayer",c={id:"layers/GraphicsLayer",title:"GraphicsLayer",description:"Basic Usage",source:"@site/examples/layers/GraphicsLayer.mdx",sourceDirName:"layers",slug:"/layers/GraphicsLayer",permalink:"/esrieact/examples/layers/GraphicsLayer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"examplesSidebar",previous:{title:"GroupLayer",permalink:"/esrieact/examples/layers/GroupLayer"},next:{title:"Widgets",permalink:"/esrieact/examples/widgets/"}},p={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"State-based graphics",id:"state-based-graphics",level:2},{value:"As a canvas for <code>Sketch</code>",id:"as-a-canvas-for-sketch",level:2}];function h(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"graphicslayer",children:"GraphicsLayer"})}),"\n",(0,r.jsx)(a.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(a.p,{children:["A ",(0,r.jsx)(a.code,{children:"GraphicsLayer"})," is a layer that can display arbitrary graphics. It can take various ",(0,r.jsx)(a.code,{children:"Graphic"})," components as children:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  return (\n    <MapView\n      ViewProperties={{ extent: OAHU_EXTENT }}\n      MapProperties={{ basemap: "topo-vector" }}\n      style={{ height: "300px", width: "100%" }}\n    >\n      <GraphicsLayer>\n        <Graphic\n          geometry={{\n            type: "point",\n            x: -17565473,\n            y: 2449593.5,\n            spatialReference: { wkid: 102100 },\n          }}\n          symbol={{\n            type: "simple-marker",\n            color: "red",\n          }}\n        />\n      </GraphicsLayer>\n    </MapView>\n  );\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"state-based-graphics",children:"State-based graphics"}),"\n",(0,r.jsxs)(a.p,{children:["You can use state to manage the graphics in a ",(0,r.jsx)(a.code,{children:"GraphicsLayer"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [graphics, setGraphics] = useState(["1", "2"]);\n\n  return (\n    <div className="flex gap-2">\n      <div className="flex flex-col gap-2 min-w-[200px]">\n        <h4>Graphics</h4>\n        {GRAPHICS_EXAMPLE_ARRAY.map((g) => (\n          <label className="flex gap-2">\n            <input\n              type="checkbox"\n              checked={graphics.includes(g.id)}\n              onChange={(e) => {\n                setGraphics(\n                  e.target.checked\n                    ? [...graphics, g.id]\n                    : graphics.filter((id) => id !== g.id),\n                );\n              }}\n            />\n            {g.name}\n          </label>\n        ))}\n      </div>\n      <MapView\n        ViewProperties={{ extent: OAHU_EXTENT }}\n        MapProperties={{ basemap: "topo-vector" }}\n        style={{ height: "300px", width: "100%" }}\n      >\n        <GraphicsLayer>\n          {GRAPHICS_EXAMPLE_ARRAY.map((graphic) => {\n            if (!graphics.includes(graphic.id)) return null;\n\n            return (\n              <Graphic\n                key={graphic.id}\n                geometry={graphic.geometry}\n                symbol={graphic.symbol}\n              />\n            );\n          })}\n        </GraphicsLayer>\n      </MapView>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsxs)(a.h2,{id:"as-a-canvas-for-sketch",children:["As a canvas for ",(0,r.jsx)(a.code,{children:"Sketch"})]}),"\n",(0,r.jsxs)(a.p,{children:["When working with a ",(0,r.jsx)(a.code,{children:"Sketch"})," component, you need to specify the ",(0,r.jsx)(a.code,{children:"layer"})," to draw to, which must be a ",(0,r.jsx)(a.code,{children:"GraphicsLayer"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-tsx",metastring:"live",live:!0,children:'function Example() {\n  const [layerRef, setLayerRef] = useState();\n\n  return (\n    <MapView\n      ViewProperties={{ extent: OAHU_EXTENT }}\n      MapProperties={{ basemap: "topo-vector" }}\n      style={{ height: "300px", width: "100%" }}\n    >\n      <GraphicsLayer ref={(r) => r && setLayerRef(r)} />\n      {layerRef && (\n        <Sketch\n          layer={layerRef}\n          position="top-right"\n          events={{\n            create: (e) => {\n              if (e.state === "complete") {\n                console.log("create", e);\n                console.log(\n                  "Layer the <Sketch /> draws to is the <GraphicsLayer />:",\n                  e.graphic.layer === layerRef,\n                );\n              }\n            },\n          }}\n        />\n      )}\n    </MapView>\n  );\n}\n'})})]})}function o(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);