"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8825],{8825:(e,i,t)=>{t.r(i),t.d(i,{default:()=>R});var a=t(82392),s=t(20906),n=t(54192),o=t(62991),r=t(80861),h=t(80294),d=t(33125),l=t(49175),p=t(61985),y=t(19759),c=t(1874),u=t(81482),f=(t(6273),t(67498),t(25376)),g=t(26325),m=t(48524),w=t(91101),M=t(41247),b=t(83441),T=t(43183),_=t(347),D=t(30179),A=t(20923),S=t(27303),L=t(90296),v=t(60368),k=t(77222),N=t(22111),G=t(9014),E=t(53921),C=t(55714);let I=class extends((0,A.dM)((0,N.j)((0,k.J)((0,D.b)((0,L.q)((0,v.A)((0,d.P)((0,S.d)(M.A))))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(n.A.ofType(T.A)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(n.A.ofType(T.A)),this.type="knowledge-graph",this.url=null,this.addHandles((0,p.wB)((()=>this.layers.concat(this.tables)),((e,i)=>this._handleSublayersChange(e,i)),p.OH))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){(0,l.QP)(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await(0,_.qN)(this)}async _fetchMetadata(){if(!this.url)throw new o.A("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await(0,E.fetchKnowledgeGraph)(this.url);this.knowledgeGraph=e,this._forEachGraphType((e=>{e.name&&this._graphTypeLookup.set(e.name,e)}))}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===w.Gr.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new b.P({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await(0,s.cZ)(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach((i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})})),this.setAtOrigin("inclusionModeDefinition",e,(0,w.OL)(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach(((e,t)=>{const a=this._graphTypeLookup.get(t);if(!a)return r.A.getLogger(this).warn(`A named type, ${t}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(t);"relationship"!==a.type&&"entity"!==a.type&&(r.A.getLogger(this).warn(`A named type, ${t}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(t))}));else if(!e.generateAllSublayers)throw new o.A("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach(((t,a)=>{const s=this._graphTypeLookup.get(a);switch(s?.type){case"relationship":i.push(s);break;case"entity":e.push(s)}})),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach((i=>{e(i)}))}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(!1===this.layers.concat(this.tables).some((e=>e.objectType.name===a.typeName))&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),(0,h.tE)(this.sublayerIdsCache,a.typeName,(()=>new Set)).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const e=this._graphTypeLookup.get(a);e&&(this._addSublayer(e),"entity"===e.type?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await(0,_.qN)(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach((e=>{const a=this._createSublayer(e);t(a)&&i.push(a),this._updateSublayerCaches(e)}))}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new T.A({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach((i=>{i.parentCompositeLayer=this;const t=e.find((e=>e.type===i.graphType&&e.name===i.graphTypeName));t&&(i.objectType=t,this._updateSublayerCaches(t))}))}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(async function(e){const i=await(0,s.fe)(e);return new Blob([i],{type:"application/x-protobuf"})}(this.inclusionModeDefinition).then((s=>{const n=function(e){const i=`definitionSetMap-${(0,c.lk)()}.dat`,t=(0,y.fj)("knowledgeGraphLayer",i);return e.resourceFromPath(t)}(a);e[i]=n.itemRelativeUrl,t.toAdd.push({resource:n,content:{type:"blob",blob:s},compress:!1,finish:e=>{this.definitionSetMap=e.url}})})))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach((e=>{e.parent=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((e=>{e.parent=this})),this.addHandles([e.on("after-add",(({item:e})=>{e.parent=this})),e.on("after-remove",(({item:e})=>{e.parent=null}))],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=w.Gr.PORTAL_ITEM&&e<w.Gr.USER}readDefinitionSetMap(e,i,t){return(0,C.f)(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,n=a?.resources,o=(0,w.aB)(a?.origin);if(!s||!n||null==o)return void(e&&(i[t]=(0,C.t)(e,a)));const{inclusionModeDefinition:r}=this;if(!r||this._displaysAllRecords(r))return void(this.definitionSetMap=null);const h=this.originIdOf("inclusionModeDefinition");if(h===w.Gr.USER||this._namedTypesModified||o<h)this._saveUrlAsNewResource(i,t,n,s);else if(o===h&&e){const o=(0,C.t)(e,a);(0,y.oP)(o)?this._saveUrlAsNewResource(i,t,n,s):i[t]=o}}set inclusionModeDefinition(e){"loaded"!==this.loadStatus&&"failed"!==this.loadStatus?this._set("inclusionModeDefinition",e):r.A.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===w.Gr.DEFAULTS?this.originIdOf("layers")===w.Gr.DEFAULTS?this._createSublayers(e,this.layers,(e=>!!e.geometryType)):this._updateSublayers(e,this.layers):this.layers=new n.A,this.tables.length||this.originIdOf("layers")===w.Gr.DEFAULTS?this.originIdOf("tables")===w.Gr.DEFAULTS?this._createSublayers(e,this.tables,(e=>!e.geometryType)):this._updateSublayers(e,this.tables):this.tables=new n.A,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e,i)=>{const t=(0,h.tE)(this.sublayerIdsCache,i,(()=>new Set));e.members?.forEach((e=>{t.add(e.id)}))}))}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new o.A("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new o.A("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),(0,h.tE)(this.sublayerIdsCache,e,(()=>new Set));const t=this._addSublayer(i);return"entity"===i.type?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await(0,_.qN)(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new o.A("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new o.A("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new o.A("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);i?.useAllData?r.A.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new o.A("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new o.A("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new o.A("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else r.A.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||r.A.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&r.A.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())(0,h.tE)(this.sublayerIdsCache,e,(()=>new Set)),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};(0,a._)([(0,u.MZ)()],I.prototype,"dataManager",void 0),(0,a._)([(0,u.MZ)({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],I.prototype,"definitionSetMap",void 0),(0,a._)([(0,f.w)("definitionSetMap")],I.prototype,"readDefinitionSetMap",null),(0,a._)([(0,m.K)("definitionSetMap")],I.prototype,"writeDefinitionSetMap",null),(0,a._)([(0,u.MZ)()],I.prototype,"inclusionModeDefinition",null),(0,a._)([(0,u.MZ)()],I.prototype,"knowledgeGraph",void 0),(0,a._)([(0,u.MZ)({type:n.A.ofType(T.A),json:{write:{ignoreOrigin:!0}}})],I.prototype,"layers",void 0),(0,a._)([(0,u.MZ)()],I.prototype,"memberEntityTypes",void 0),(0,a._)([(0,u.MZ)()],I.prototype,"memberRelationshipTypes",void 0),(0,a._)([(0,u.MZ)({type:["KnowledgeGraphLayer"]})],I.prototype,"operationalLayerType",void 0),(0,a._)([(0,u.MZ)()],I.prototype,"sublayerIdsCache",void 0),(0,a._)([(0,u.MZ)({type:n.A.ofType(T.A),json:{write:{ignoreOrigin:!0}}})],I.prototype,"tables",void 0),(0,a._)([(0,u.MZ)({json:{read:!1}})],I.prototype,"type",void 0),(0,a._)([(0,u.MZ)(G.OZ)],I.prototype,"url",void 0),I=(0,a._)([(0,g.$)("esri.layers.KnowledgeGraphLayer")],I);const R=I}}]);