"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2437],{54421:(e,t,s)=>{s.d(t,{A:()=>l});var r=s(66866),i=s(52495),a=s(21564),n=(s(73446),s(85569),s(39831),s(63863));let o=class extends i.A{initialize(){}destroy(){}get supportsTileUpdates(){return!1}get spatialReference(){const e=this.tileStore.tileScheme.spatialReference;return e&&e.toJSON()||null}};(0,r._)([(0,a.MZ)({readOnly:!0})],o.prototype,"supportsTileUpdates",null),(0,r._)([(0,a.MZ)({constructOnly:!0})],o.prototype,"remoteClient",void 0),(0,r._)([(0,a.MZ)({constructOnly:!0})],o.prototype,"service",void 0),(0,r._)([(0,a.MZ)()],o.prototype,"spatialReference",null),(0,r._)([(0,a.MZ)({constructOnly:!0})],o.prototype,"tileInfo",void 0),(0,r._)([(0,a.MZ)({constructOnly:!0})],o.prototype,"tileStore",void 0),o=(0,r._)([(0,n.$)("esri.views.2d.layers.features.processors.BaseProcessor")],o);const l=o},32437:(e,t,s)=>{s.r(t),s.d(t,{default:()=>w});var r=s(66866),i=s(21870),a=(s(98849),s(39831),s(539),s(6267)),n=s(40189),o=(s(73446),s(85569),s(63863)),l=s(64442),c=s(78983),u=s(65065),h=s(79432),d=s(82547),f=s(23951),y=s(32964),g=s(9725),p=s(65126),m=s(54421);class _{constructor(e){this._remoteClient=e,this._resourceMap=new Map,this._inFlightResourceMap=new Map,this.geometryEngine=null,this.geometryEnginePromise=null}destroy(){}async fetchResource(e,t){const s=this._resourceMap,r=s.get(e);if(r)return r;let i=this._inFlightResourceMap.get(e);if(i)return i;try{i=this._remoteClient.invoke("tileRenderer.fetchResource",{url:e},{...t}),this._inFlightResourceMap.set(e,i),i.then((t=>(this._inFlightResourceMap.delete(e),s.set(e,t),t)))}catch(a){return(0,n.zf)(a)?null:{width:0,height:0}}return i}getResource(e){return this._resourceMap.get(e)??null}loadFont(e){return Promise.resolve(null)}}function b(e,t){const s=t-t/4,r=t+t/2;return(!e.minScale||e.minScale>=s)&&(!e.maxScale||e.maxScale<=r)}function M(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey,tileKeyOrigin:t.tileKeyOrigin,version:t.version},transferList:new Array};for(const r in t.data){const e=r,i=t.data[e];if(s.message.data[e]=null,null!=i){const t=i.stride,r=i.indices.slice(0),a=i.vertices.slice(0),n=i.records.slice(0),o=i.metrics?.slice(0),l={stride:t,indices:r,vertices:a,records:n,metrics:o};s.transferList.push(r,a,n),s.message.data[e]=l}}return s}let v=class extends m.A{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map}initialize(){this.addHandles([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new _(this.remoteClient)}destroy(){this._resourceManagerProxy.destroy()}get supportsTileUpdates(){return!0}forEachBufferId(e){this._bufferIds.forEach((t=>{t.forEach(e)}))}async update(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const r=(0,l.Ui)(this._schema,s);((0,l.EB)(r,"mesh")||(0,l.EB)(r,"target"))&&(e.mesh=!0,e.why?.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,s,r){return(0,n.Te)(r),this._onTileData(e,t,s,r)}onTileClear(e,t){const s={clear:!0,end:t};return this._bufferData.delete(e.key.id),this._bufferIds.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:s})}onTileError(e,t,s){const r=s.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(e){for(const t of e.removed)this._bufferData.has(t.key.id)&&this._bufferData.delete(t.key.id),this._bufferIds.has(t.key.id)&&this._bufferIds.delete(t.key.id);for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,M(s),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e)?.push(M(t))}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,i={geometryType:t,fields:r,spatialReference:c.A.fromJSON(this.spatialReference)},a=new y._y(((e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t)),this.tileStore.tileScheme.tileInfo),{matcher:n,aggregateMatcher:o}=e.mesh;return this._store=a,this._matchers.feature=(0,g.P7)(n,a,i,this._resourceManagerProxy),this._matchers.aggregate=o?(0,g.P7)(o,a,i,this._resourceManagerProxy):null,new f.K(t,s,a)}async _onTileData(e,t,s,r){(0,n.Te)(r);const{type:i,addOrUpdate:a,remove:o,clear:l,end:c}=t,u=!!this._schema.mesh.sortKey;if(!a){const t={type:i,addOrUpdate:null,remove:o,clear:l,end:c,sort:u};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const h=this._processFeatures(e,a,s,r,t.status?.version);try{const s=await h;if(null==s){const t={type:i,addOrUpdate:null,remove:o,clear:l,end:c,sort:u};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const a=[];for(const t of s){let s=!1;const r=t.message.bufferIds,i=e.key.id,n=t.message.tileKey;if(i!==n&&null!=r){if(!this.tileStore.get(n)){this._addBufferData(i,t),a.push(t);continue}let e=this._bufferIds.get(n);e||(e=new Set,this._bufferIds.set(n,e));const o=Array.from(r);for(const t of o){if(e.has(t)){s=!0;break}e.add(t)}}s||(this._addBufferData(i,t),a.push(t))}await Promise.all(a.map((s=>{const a=e.key.id===s.message.tileKey,n=a?t.remove:[],o=a&&t.end;return this._updateTileMesh(i,e,s,n,o,!!t.clear,r.signal)})))}catch(d){this._handleError(e,d,r)}}async _updateTileMesh(e,t,s,r,i,a,o){const l=e,c=s.message.tileKey,u=!!this._schema.mesh.sortKey;c!==t.key.id&&(i=!1);const h=s?.message,d={type:l,addOrUpdate:h,remove:r,clear:a,end:i,sort:u},f={transferList:s?.transferList??[],signal:o};return(0,n.Te)(f),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:c,data:d},f)}async _processFeatures(e,t,s,r,i){if(null==t||!t.hasFeatures)return null;const a={transform:e.transform,hasZ:!1,hasM:!1},o=this._factory,l={viewingMode:"",scale:e.scale},c=await this._matchers.feature,u=await this._matchers.aggregate;(0,n.Te)(r);const h=this._getLabelInfos(e,t);return await o.analyze(t.getCursor(),this._resourceManagerProxy,c,u,a,l),(0,n.Te)(r),this._writeFeatureSet(e,t,a,h,o,s,i)}_writeFeatureSet(e,t,s,r,i,a,n){const o=t.getSize(),l=this._schema.mesh.matcher.symbologyType,c=new d.U(e.key.id,{features:o,records:o,metrics:0},l,a,l!==h.w4.HEATMAP,n),u={viewingMode:"",scale:e.scale},f=t.getCursor();for(;f.next();)try{const t=f.getDisplayId(),a=null!=r?r.get(t):null;i.writeCursor(c,f,s,u,e.level,a,this._resourceManagerProxy)}catch(g){}const y=e.tileInfoView.tileInfo.isWrappable;return c.serialize(y)}_handleError(e,t,s){if(!(0,n.zf)(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}return Promise.resolve()}_getLabelingSchemaForScale(e){const t=this._schema.mesh.labels;if(null==t)return null;if("subtype"===t.type){const s={type:"subtype",classes:{}};let r=!1;for(const i in t.classes){const a=t.classes[i].filter((t=>b(t,e.scale)));r=r||!!a.length,s.classes[i]=a}return r?s:null}const s=t.classes.filter((t=>b(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){const s=this.service.subtypeField;(0,a.Lw)(s,"Expected to find subtype Field");const r=e.readAttribute(s);return null==r?[]:t.classes[r]??[]}return t.classes}_getLabelInfos(e,t){const s=this._getLabelingSchemaForScale(e);if(null==s)return null;const r=new Map,a=t.getCursor();for(;a.next();){const e=a.getDisplayId(),t=[],n=(0,u.h8)(e),o=n&&1!==a.readAttribute("cluster_count")?"aggregate":"feature",l=this._getLabels(a,s);for(const s of l){if(s.target!==o)continue;const r=a.getStorage(),l=n&&"feature"===o?r.getComputedStringAtIndex(a.readAttribute("referenceId"),s.fieldIndex):r.getComputedStringAtIndex(e,s.fieldIndex);if(!l)continue;const c=(0,i.y)(l.toString()),u=c[0],h=c[1];this._store.getMosaicItem(s.symbol,(0,p.N)(u)).then((e=>{t[s.index]={glyphs:e.glyphMosaicItems??[],rtl:h,index:s.index}}))}r.set(e,t)}return r}};v=(0,r._)([(0,o.$)("esri.views.2d.layers.features.processors.SymbolProcessor")],v);const w=v}}]);