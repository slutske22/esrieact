"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1461],{583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(74848),a=n(28453);const s={sidebar_position:2,title:"A Note About Props"},i="Props",o={id:"props",title:"A Note About Props",description:"Vanilla ESRI component properties are class-based, and often circular. For example:",source:"@site/docs/props.md",sourceDirName:".",slug:"/props",permalink:"/esrieact/props",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"A Note About Props"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/esrieact/"},next:{title:"MapView",permalink:"/esrieact/map-view"}},c={},p=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"props",children:"Props"})}),"\n",(0,r.jsx)(t.p,{children:"Vanilla ESRI component properties are class-based, and often circular. For example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// Using vanilla ArcGIS JS API\n\nconst view = new MapView({\n  extent: new Extent({\n    xmin: 10,\n    xmax: 100,\n    ymin: -20,\n    ymax: 120,\n    spatialReference: new SpatialReference({\n      wkid: 102100,\n    }),\n  }),\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Beacuse react-wrapped ESRI component props extend directly from ESRI class options, this would technically work:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'import React from "react";\nimport { FeatureLayer, MapView } from "./esri";\n\nexport const ReactMap: React.FC = ({ layerList }) => {\n  return (\n    <MapView\n      extent={new Extent({\n        xmin: 10,\n        xmax: 100,\n        ymin: -20,\n        ymax: 120,\n        spatialReference: new SpatialReference({\n          wkid: 102100\n        })\n      })}\n    />\n  );\n};\n'})}),"\n",(0,r.jsxs)(t.p,{children:["However, any propery then updated within the above ",(0,r.jsx)(t.code,{children:"new Extent"})," would not register as a property change with react. The reason for this is that many ArcGIS class-based instance properties are ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties",children:"non-Enumerable"}),", and as such, React will not know they have been changed, and will not update the property accordingly. For example, this will not work as expected:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'import React from "react";\nimport { FeatureLayer, MapView } from "./esri";\nimport FeatureEffect from \'@arcgis/core/layers/FeatureEffect\'\nimport FeatureFilter from \'@arcgis/core/layers/FeatureFilter\'\n\nexport const ReactMap: React.FC = ({ layerList }) => {\n  const [clause, setClause] = useState("SOME SQL CLAUSE");\n\n  return (\n    <MapView>\n      <FeatureLayer featureEffect={new FeatureEffect({\n        filter: new FeatureFilter({\n          where: clause\n        })\n      })} />\n    </MapView>\n  );\n};\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Because the property being updated is deeply nested within class-based ESRI components, whose resultant properties are non-enumerable, react will not sense the change and will not update the component. However, most ESRI component properties accept simple objects as option parameters that get ",(0,r.jsx)(t.a,{href:"https://developers.arcgis.com/javascript/latest/programming-patterns/#autocasting",children:"auto-casted"})," to their corresponding class constructor:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'import React from "react";\nimport { FeatureLayer, MapView } from "./esri";\n\nexport const ReactMap: React.FC = ({ layerList }) => {\n  const [clause, setClause] = useState("SOME SQL CLAUSE");\n\n  return (\n    <MapView>\n      <FeatureLayer featureEffect={{\n        filter: {\n          where: clause\n        }\n      }} />\n    </MapView>\n  );\n};\n'})}),"\n",(0,r.jsxs)(t.p,{children:["It is prefereable to use this second syntax in this codebase. (Though in the case of trying to filter a FeatureLayer, it is preferable to use a ",(0,r.jsx)(t.a,{href:"https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression",children:"definitionExpression"})," for server-side filtering, or a ",(0,r.jsx)(t.code,{children:"<FeatureLayerView />"})," component with a ",(0,r.jsx)(t.code,{children:"filter"})," applied for front-end filtering)."]}),"\n",(0,r.jsxs)(t.p,{children:["Note that attempting to update any ",(0,r.jsx)(t.code,{children:"readonly"})," properties via props or state, on any ArcGIS JS API instance, will fail."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);